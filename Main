import pygame
import button
from os import path
from pygame.locals import *
import pickle

pygame.init()

clock = pygame.time.Clock()
FPS = 120

SCREEN_WIDTH = 840
SCREEN_HEIGHT = 660

SIDE_MARGIN = 300

screen = pygame.display.set_mode((SCREEN_WIDTH + SIDE_MARGIN, SCREEN_HEIGHT))
pygame.display.set_caption('Pixel Stuck')
icon_img = pygame.image.load('img/tile/9.png')
swap_img = pygame.image.load('img/tile/4.png').convert_alpha()
swap_img = pygame.transform.scale(swap_img, (60, 60)) 
hook_img = pygame.image.load('img/tile/3.png').convert_alpha()
hook_img = pygame.transform.scale(hook_img, (60, 60)) 
pygame.display.set_icon(icon_img)


MAX_COLS = 14
ROWS = 11
TILE_SIZE = SCREEN_HEIGHT // ROWS


level = 0
swap_count = 0
hook_count = 5
game_over = 0
current_tile = -1
max_levels = 4
facing = 1 #right
player_movement = True
main_menu = True
allow_hook = False
get_hooked_r = False
get_hooked_l = False

#colours
GREEN = (144, 201, 120)
WHITE = (255, 255, 255)
RED = (255,69,0)
BLUE = (0, 0, 255)
VIOLET = (138,43,226)

#font
font_level = pygame.font.SysFont('sitkasmallsitkatextbolditalicsitkasubheadingbolditalicsitkaheadingbolditalicsitkadisplaybolditalicsitkabannerbolditalic', 45)
font_sub = pygame.font.SysFont('verdana', 30)
font_score = pygame.font.SysFont('Bauhaus 93', 50)

#load images
background1_img = pygame.image.load('img/background/1.png')
border_img = pygame.image.load('img/background/border.png').convert_alpha()
border_img = pygame.transform.scale(border_img, (250, 300)) 
level_border_img = pygame.image.load('img/background/level_border.png').convert_alpha()
level_border_img = pygame.transform.scale(level_border_img, (250, 75)) 
restart_img = pygame.image.load('img/buttons/restart_btn.png')
start_img = pygame.image.load('img/buttons/start_btn.png')
exit_img = pygame.image.load('img/buttons/exit_btn.png')


#draw grid
def draw_grid():
    THICK_COUNT = 2
    #vertical
    for c in range (MAX_COLS + 1):
        if THICK_COUNT == 3:
            pygame.draw.line(screen, BLUE, (c * TILE_SIZE, 0), (c * TILE_SIZE, SCREEN_HEIGHT), 3)
            THICK_COUNT = 1
        else: 
            pygame.draw.line(screen, WHITE, (c * TILE_SIZE, 0), (c * TILE_SIZE, SCREEN_HEIGHT))
            THICK_COUNT += 1
    #horizontal
    THICK_COUNT = 2
    for c in range (ROWS + 1):
        if THICK_COUNT == 3:
            pygame.draw.line(screen, BLUE, (0, c * TILE_SIZE), (SCREEN_WIDTH, c * TILE_SIZE), 3)  
            THICK_COUNT = 1
        else: 
            pygame.draw.line(screen, WHITE, (0, c * TILE_SIZE), (SCREEN_WIDTH, c * TILE_SIZE)) 
            THICK_COUNT += 1
        
#draw text
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))
        
        
        
def reset_level(level):
    player.reset(60, SCREEN_HEIGHT - 65)
    swamp_group.empty()
    flag_group.empty()
    swap_group.empty()
    hook_group.empty()
    

    #load in level data and create world
    if path.exists(f'level{level}_data'):
        pickle_in = open(f'level{level}_data', 'rb')
        world_data = pickle.load(pickle_in)
    world = World(world_data)

    return world


   
class World():
    def __init__(self, data):
        self.tile_list = []
        
        
        gold_img = pygame.image.load('img/tile/0.png')
        block1_img = pygame.image.load('img/tile/5.png')
        block2_img = pygame.image.load('img/tile/6.png')
        block3_img = pygame.image.load('img/tile/7.png')
        block4_img = pygame.image.load('img/tile/8.png')
        lock_img = pygame.image.load('img/tile/9.png')
        row_count = 0
        for row in data:
            col_count = 0
            for tile in row:
                if tile == 0 :
                    img = pygame.transform.scale(gold_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 5 :
                    img = pygame.transform.scale(block1_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 6 :
                    img = pygame.transform.scale(block2_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 7 :
                    img = pygame.transform.scale(block3_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 8 :
                    img = pygame.transform.scale(block4_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 9 :
                    img = pygame.transform.scale(lock_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 1:
                    swamp = Swamp(col_count * TILE_SIZE, row_count * TILE_SIZE)
                    swamp_group.add(swamp)
                if tile == 2:
                    flag = Flag(col_count * TILE_SIZE, row_count * TILE_SIZE)
                    flag_group.add(flag)
                if tile == 3:
                    hook = Hook(col_count * TILE_SIZE + (TILE_SIZE // 2), row_count * TILE_SIZE +  (TILE_SIZE // 2))
                    hook_group.add(hook)  
                if tile == 4:
                    swap = Swap(col_count * TILE_SIZE + (TILE_SIZE // 2), row_count * TILE_SIZE +  (TILE_SIZE // 2))
                    swap_group.add(swap)                    
                
                
                
                col_count += 1
            row_count +=1
            
            
    def draw(self):
        for tile in self.tile_list:
            screen.blit(tile[0], tile[1])

#player
class Player():
    def __init__(self, x, y):
        self.reset(x, y)

    def update(self, game_over):
        global facing, sprite_x_r, sprite_y
        dx = 0
        dy = 0
        walk_cooldown = 5

        #get keypresses
        if game_over == 0:
            key = pygame.key.get_pressed()
            if key[pygame.K_SPACE] and self.jumped == False and self.in_air == False and player_movement == True: 
                self.vel_y = -10
                self.jumped = True
            if key[pygame.K_SPACE] == False:
                self.jumped = False
            if key[pygame.K_LEFT] and player_movement == True:
                dx -= 3
                self.counter += 1
                self.direction = -1
                facing = -1
            if key[pygame.K_RIGHT] and player_movement == True:
                dx += 3
                self.counter += 1
                self.direction = 1
                facing = 1
            if key[pygame.K_LEFT] == False and key[pygame.K_RIGHT] == False:
                self.counter = 0
                self.index = 0
                if self.direction == 1:
                    self.image = self.images_right[self.index]
                if self.direction == -1:
                    self.image = self.images_left[self.index]
                
    
    
            #handle animation
            if self.counter > walk_cooldown:
                self.counter = 0	
                self.index += 1
                if self.index >= len(self.images_right):
                    self.index = 0
                if self.direction == 1:
                    self.image = self.images_right[self.index]
                if self.direction == -1:
                    self.image = self.images_left[self.index]
    
    
            #add gravity
            self.vel_y += 0.8
            if self.vel_y > 10:
                self.vel_y = 10
            dy += self.vel_y
    
            #check for collision
            self.in_air = True
            for tile in world.tile_list:
                #check for collision in x direction
                if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height) and not tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                    dx = 0
                #check for collision in y direction
                if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                    #check if below the ground i.e. jumping
                    if self.vel_y < 0:
                        #dy = tile[1].bottom - self.rect.top
                        #self.vel_y = 0
                        pass
                    #check if above the ground i.e. falling
                    elif self.vel_y >= 0 and tile[1].top - self.rect.bottom > -46:
                        dy = tile[1].top - self.rect.bottom
                        self.vel_y = 0
                        self.in_air = False
                        
            #check collision with enemy
            if pygame.sprite.spritecollide(self, swamp_group, False):
                game_over = -1
                    
            #check for collision with exit
            if pygame.sprite.spritecollide(self, flag_group, False):
                game_over = 1


        elif game_over == -1:
            self.image = self.dead_image
            if self.rect.y > 200:
                self.rect.y -= 5
        #update player coordinates
        self.rect.x += dx
        self.rect.y += dy
        #player coords to check collision of hook
        sprite_x_r = (self.rect.x + TILE_SIZE-16)  // TILE_SIZE
        sprite_x_l = self.rect.x  // TILE_SIZE
        sprite_y = self.rect.y // TILE_SIZE
        if self.rect.bottom > SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT
            dy = 0

        #draw player onto screen
        screen.blit(self.image, self.rect)
        
        return game_over
    
    def reset(self, x, y):
        self.images_right = []
        self.images_left = []
        self.dead_image = pygame.image.load('img/characters/ghost.png')
        self.index = 0
        self.counter = 0
        for num in range(1, 3):
            img_right = pygame.image.load(f'img/characters/guy{num}.png')
            img_right = pygame.transform.scale(img_right, ( TILE_SIZE-15 , TILE_SIZE - 10))
            img_left = pygame.transform.flip(img_right, True, False)
            self.images_right.append(img_right)
            self.images_left.append(img_left)
        self.image = self.images_right[self.index]
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.width = self.image.get_width()
        self.height = self.image.get_height()
        self.vel_y = 0
        self.jumped = False
        self.direction = 0 





class Swamp(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        img = pygame.image.load('img/tile/1.png')
        self.image = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
            
class Flag(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        img = pygame.image.load('img/tile/2_1.png')
        self.image = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        
class Hook(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        img = pygame.image.load('img/tile/3.png')
        self.image = pygame.transform.scale(img, (TILE_SIZE // 2, TILE_SIZE // 2))
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        
class Swap(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        img = pygame.image.load('img/tile/4.png')
        self.image = pygame.transform.scale(img, (TILE_SIZE // 2, TILE_SIZE // 2))
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)   
      
      
player = Player(60, SCREEN_HEIGHT - 65)


swamp_group = pygame.sprite.Group()
flag_group = pygame.sprite.Group()
hook_group = pygame.sprite.Group()
swap_group = pygame.sprite.Group()

            
if path.exists(f'level{level}_data'):
    pickle_in = open(f'level{level}_data', 'rb')
    world_data = pickle.load(pickle_in)
world = World(world_data)
        
#buttons
restart_button = button.Button(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT // 2 + 100, restart_img, 1)
start_button = button.Button(SCREEN_WIDTH // 2 + 15, SCREEN_HEIGHT //2 - 200, start_img, 2)
exit_button = button.Button(SCREEN_WIDTH // 2 + 35, SCREEN_HEIGHT //2, exit_img, 2)
hook_button = button.Button(SCREEN_WIDTH + 70, 550, hook_img, 1)
swap_button = button.Button(SCREEN_WIDTH + 200, 540, swap_img, 1)


run = True
while run:
    
    clock.tick(FPS)
    screen.blit(background1_img, (0,0))
    
    for event in pygame.event.get():
        
        if event.type == pygame.QUIT:
            run = False    
        
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT and allow_hook == True and hook_count > 0:
                get_hooked_r = True
                hook_count -= 1
            if event.key == pygame.K_LEFT and allow_hook == True and hook_count > 0:
                get_hooked_l = True
                hook_count -= 1
            
    if main_menu == True:
        if exit_button.draw(screen):
            run = False
        if start_button.draw(screen):
            main_menu = False
    else:        
        draw_grid()
        world.draw()
        #UI
        screen.blit(level_border_img, (SCREEN_WIDTH + 30 , 10))
        
        draw_text('Gadgets', font_sub, WHITE, SCREEN_WIDTH + 90, 150)
        screen.blit(border_img, (SCREEN_WIDTH + 30 , 200))
        screen.blit(hook_img, (SCREEN_WIDTH + 80,260))
        screen.blit(swap_img, (SCREEN_WIDTH + 80,370))
        
        
        
        
        if game_over == 0:
            draw_text(f'Level: {level}', font_level, RED, SCREEN_WIDTH + 60, 25)
            #update score
            #check if a hook has been collected
            if pygame.sprite.spritecollide(player, swap_group, True):
                swap_count += 1
            draw_text('X ' + str(swap_count), font_score, GREEN, SCREEN_WIDTH + 180, 400)  
            if pygame.sprite.spritecollide(player, hook_group, True):
                hook_count += 1   
            draw_text('X ' + str(hook_count), font_score, GREEN, SCREEN_WIDTH + 180, 275)
            
            #if using hook
            if hook_button.draw(screen):
                player_movement = not player_movement
                allow_hook = not allow_hook
                
            
            if get_hooked_r == True:
                for tile_check in range (sprite_x_r, 12):
                    if world_data[sprite_y][tile_check] != -1:
                        hooked_tile = world_data[sprite_y][tile_check]
                        world_data[sprite_y][tile_check] = -1
                        world_data[sprite_y][tile_check - 1] = hooked_tile
                        break
                get_hooked_r = False
                world = World(world_data)
            
            swap_button.draw(screen)            
        
        swamp_group.draw(screen) 
        flag_group.draw(screen)
        swap_group.draw(screen)
        hook_group.draw(screen)
        
        
        game_over = player.update(game_over)
        if game_over == -1:
            draw_text(f'Level: {level}', font_level, RED, SCREEN_WIDTH + 60, 25)
            hook_count = 0
            swap_count = 0            
            draw_text('X ' + str(swap_count), font_score, GREEN, SCREEN_WIDTH + 180, 400)
            draw_text('X ' + str(hook_count), font_score, GREEN, SCREEN_WIDTH + 180, 275)
            if restart_button.draw(screen):
                world_data = []
                world = reset_level(level)
                game_over = 0
                
        
        if game_over == 1:
        #reset game and go to next level
            level += 1
            hook_count = 0
            swap_count = 0            
            if level <= max_levels:
                #reset level
                world_data = []
                world = reset_level(level)
                game_over = 0
            else:
                draw_text('YOU WIN!', font_level, BLUE, (SCREEN_WIDTH // 2) - 140, SCREEN_HEIGHT // 2)
                draw_text(f'Level: {max_levels}', font_level, RED, SCREEN_WIDTH + 60, 25)
                draw_text('X ' + str(swap_count), font_score, GREEN, SCREEN_WIDTH + 180, 400)
                draw_text('X ' + str(hook_count), font_score, GREEN, SCREEN_WIDTH + 180, 275)                
                if restart_button.draw(screen):
                    level = 0
                    #reset level
                    world_data = []
                    world = reset_level(level)
                    game_over = 0
                    hook_count = 0
                    swap_count = 0                    
            
            
    

    pygame.display.update()

pygame.quit()
