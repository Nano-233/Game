import pygame
import button
from os import path
from pygame.locals import *
import pickle

pygame.init()

clock = pygame.time.Clock()
FPS = 120

SCREEN_WIDTH = 840
SCREEN_HEIGHT = 660

SIDE_MARGIN = 300

screen = pygame.display.set_mode((SCREEN_WIDTH + SIDE_MARGIN, SCREEN_HEIGHT))
pygame.display.set_caption('Lv editor')

MAX_COLS = 14
ROWS = 11
TILE_SIZE = SCREEN_HEIGHT // ROWS

level = 0

#colours
GREEN = (144, 201, 120)
WHITE = (255, 255, 255)
RED = (200, 25, 25)
BLUE = (0, 0, 255)


#load images
background1_img = pygame.image.load('img/background/1.png')


#draw grid
def draw_grid():
    THICK_COUNT = 2
    #vertical
    for c in range (MAX_COLS + 1):
        if THICK_COUNT == 3:
            pygame.draw.line(screen, BLUE, (c * TILE_SIZE, 0), (c * TILE_SIZE, SCREEN_HEIGHT), 3)
            THICK_COUNT = 1
        else: 
            pygame.draw.line(screen, WHITE, (c * TILE_SIZE, 0), (c * TILE_SIZE, SCREEN_HEIGHT))
            THICK_COUNT += 1
    #horizontal
    THICK_COUNT = 2
    for c in range (ROWS + 1):
        if THICK_COUNT == 3:
            pygame.draw.line(screen, BLUE, (0, c * TILE_SIZE), (SCREEN_WIDTH, c * TILE_SIZE), 3)  
            THICK_COUNT = 1
        else: 
            pygame.draw.line(screen, WHITE, (0, c * TILE_SIZE), (SCREEN_WIDTH, c * TILE_SIZE)) 
            THICK_COUNT += 1
        
        
class World():
    def __init__(self, data):
        self.tile_list = []
        
        
        gold_img = pygame.image.load('img/tile/0.png')
        block1_img = pygame.image.load('img/tile/5.png')
        block2_img = pygame.image.load('img/tile/6.png')
        block3_img = pygame.image.load('img/tile/7.png')
        block4_img = pygame.image.load('img/tile/8.png')
        lock_img = pygame.image.load('img/tile/9.png')
        row_count = 0
        for row in data:
            col_count = 0
            for tile in row:
                if tile == 0 :
                    img = pygame.transform.scale(gold_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 5 :
                    img = pygame.transform.scale(block1_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 6 :
                    img = pygame.transform.scale(block2_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                if tile == 7 :
                    img = pygame.transform.scale(block3_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 8 :
                    img = pygame.transform.scale(block4_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 9 :
                    img = pygame.transform.scale(lock_img, (TILE_SIZE, TILE_SIZE))
                    img_rect = img.get_rect()
                    img_rect.x = col_count * TILE_SIZE
                    img_rect.y = row_count * TILE_SIZE
                    tile = (img, img_rect)
                    self.tile_list.append(tile)
                if tile == 1:
                    swamp = Swamp(col_count * TILE_SIZE, row_count * TILE_SIZE)
                    swamp_group.add(swamp)
                
                
                
                col_count += 1
            row_count +=1
            
            
    def draw(self):
        for tile in self.tile_list:
            screen.blit(tile[0], tile[1])


class Swamp(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        img = pygame.image.load('img/tile/1.png')
        self.image = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
            
            
swamp_group = pygame.sprite.Group()
            
if path.exists(f'level{level}_data'):
    pickle_in = open(f'level{level}_data', 'rb')
    world_data = pickle.load(pickle_in)
world = World(world_data)
        
        

run = True
while run:
    
    clock.tick(FPS)
    screen.blit(background1_img, (0,0))
    draw_grid()
    world.draw()
    
    
    swamp_group.draw(screen) 

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    pygame.display.update()

pygame.quit()
